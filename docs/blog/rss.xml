<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>盘古开发框架项目官网 Blog</title>
        <link>https://pulanos.gitee.io/pangu-framework/blog</link>
        <description>盘古开发框架项目官网 Blog</description>
        <lastBuildDate>Sun, 30 Jan 2022 00:00:00 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <item>
            <title><![CDATA[使用 Caddy 部署盘古项目官网]]></title>
            <link>https://pulanos.gitee.io/pangu-framework/blog/caddy-vs-nginx</link>
            <guid>caddy-vs-nginx</guid>
            <pubDate>Sun, 30 Jan 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[Caddy VS Nginx & 盘古开发框架最佳实践]]></description>
            <content:encoded><![CDATA[<blockquote><p>Caddy 2 is a powerful, enterprise-ready, open source web server with automatic HTTPS written in Go.</p></blockquote><p align="right"> — 摘自 <a href="https://caddyserver.com/">Caddy 官网</a></p><h2>Caddy 特性</h2><ul><li>缺省启用HTTP/2 协议，无需任何配置。</li><li>缺省全站HTTPS，无需任何配置。（自动申请和续期证书）</li><li>简单友好的配置文件，支持在线配置 API。</li><li>golang 开发，几乎无依赖，部署简单。</li><li>充当 API Gateway, 反向代理后端多个 Web 节点。</li><li>天生插件架构，社区插件丰富，且自定义插件简单（写个插件顺便蹭一下 golang 的热度）。</li></ul><h2>Caddy 实战</h2><blockquote><p>Web Server 托管静态资源，以部署盘古开发框架项目官网为例。<a href="https://pangu.pulanit.com">https://pangu.pulanit.com</a></p></blockquote><h3>安装</h3><h4>Fedora, RHEL/CentOS 8</h4><pre><code>$ dnf install &#x27;dnf-command(copr)&#x27;
$ dnf copr enable @caddy/caddy
$ dnf install caddy
</code></pre><h4>RHEL/CentOS 7</h4><pre><code>$ yum install yum-plugin-copr
$ yum copr enable @caddy/caddy
$ yum install caddy
</code></pre><h3>常用命令</h3><pre><code class="language-jsx">$ systemctl start[stop|restart] caddy
$ systemctl reload caddy //重新加载配置文件
$ systemctl status caddy //查看运行状态
</code></pre><h3>修改配置文件</h3><pre><code># vi /etc/caddy/Caddyfile
pangu.pulanit.com {
        # Set this path to your site&#x27;s directory.
        root * /var/www/pangu.pulanit.com
        encode gzip
        # Enable the static file server.
        file_server
}
</code></pre><ul><li>静态资源文件上传到目录：<code>/var/www/pangu.pulanit.com</code>。</li></ul><h3>域名解析</h3><p>域名解析地址必须和上述配置文件中的域名保持一致即可。尝试访问：<a href="https://pangu.pulanit.com">https://pangu.pulanit.com</a>。可见，<strong>网站自动开启了HTTPS</strong>。</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[盘古开发框架集成 ShenYu 网关]]></title>
            <link>https://pulanos.gitee.io/pangu-framework/blog/pangu-dev-framework-apache-shenyu</link>
            <guid>pangu-dev-framework-apache-shenyu</guid>
            <pubDate>Sat, 29 Jan 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[盘古开发框架集成 ShenYu 网关]]></description>
            <content:encoded><![CDATA[<p>盘古开发框架下实现微服务网关的缺省姿势为基于 pangu-web 模块的传统接口调用模式，具体请参考文档：<a href="/docs/quick-start/how-to-create-http-api">如何发布微服务 (API 网关)</a>。本文提供另外一种通过集成Apache ShenYu 实现网关泛化调用 Dubbo 服务将其发布为 HTTP 接口的可选方法。</p><h2>ShenYu 网关介绍</h2><p>ShenYu 网关基于 Webflex 非阻塞模型通过泛化调用后端 Dubbo 服务。不需要引入服务接口包即可通过 Dubbo 泛化调用服务接口的方式将后端 Dubbo 服务转换为 HTTP API。同时网关支持鉴权、动态限流、熔断、防火墙、灰度发布等。</p><ul><li><strong>实现原理</strong><br/>基于 Spring Webflex，依赖 Netty 框架或 Servlet 3.1+ 容器。</li><li><strong>Dubbo 集成</strong><br/>不依赖接口 JAR，泛化调用 Dubbo 服务。</li><li><strong>性能 &amp; 复杂度</strong><br/>网关自身性能较高（Webflex非阻塞模型），但泛化调用性能有损耗（10%~20%）。开发部署运维极其复杂，带来的成本不可小觑。</li><li><strong>其它特性</strong><br/>支持流量控制、鉴权、熔断等（配置复杂）。</li></ul><h3>相关名词解释</h3><ul><li><strong>shenyu-admin</strong><br/>网关插件和元数据信息配置管理后台。独立 JAR，需要单独部署。</li><li><strong>shenyu-gateway</strong><br/>网关模块，代理 Http 请求，泛化调用后端 Dubbo 服务。此模块负责接收 Http 请求。</li><li><strong>数据同步</strong><br/>数据同步是指在 ShenYu-Admin 后台操作数据以后，使用何种策略将数据同步到 ShenYu Gateway 网关模块。ShenYu 当前支持 ZooKeeper、WebSocket、Http 长轮询、Nacos 、Etcd 和 Consul 进行数据同步。盘古开发使用的是 WebSocket 方式进行数据同步。</li><li><strong>插件</strong><br/>ShenYu 使用插件化设计思想，实现插件的热插拔。内置丰富的插件，包括 RPC 代理、熔断和限流、权限认证、监控等等。</li><li><strong>选择器</strong><br/>每个插件可设置多个选择器，对流量进行初步筛选。</li><li><strong>规则</strong><br/>每个选择器可设置多个规则，对流量进行更细粒度的控制。</li></ul><h3>网关调用结构图</h3><p><img src="/resources/doc/9-pangu-framework-shenyu.png" alt="盘古网关系统"/></p><h2>ShenYu 网关实战</h2><p>ShenYu 网关提供的功能非常多，这里我们只关注 HTTP 请求代理功能。即代理前端 HTTP 请求，通过 Dubbo 泛化调用后端 Dubbo 服务。</p><h3>安装相关模块</h3><div><div value="parent" label="盘古 Parent"><pre><code class="language-jsx">&lt;parent&gt;
    &lt;groupId&gt;com.gitee.pulanos.pangu&lt;/groupId&gt;
    &lt;artifactId&gt;pangu-parent&lt;/artifactId&gt;
    &lt;version&gt;latest.version.xxx&lt;/version&gt;
    &lt;relativePath/&gt;
&lt;/parent&gt;
</code></pre></div><div value="dependency1" label="基础模块"><pre><code class="language-jsx">&lt;dependency&gt;
    &lt;groupId&gt;com.gitee.pulanos.pangu&lt;/groupId&gt;
    &lt;artifactId&gt;pangu-spring-boot-starter&lt;/artifactId&gt;
&lt;/dependency&gt;
</code></pre></div><div value="dependency2" label="Dubbo 模块"><pre><code class="language-jsx">&lt;dependency&gt;
    &lt;groupId&gt;com.gitee.pulanos.pangu&lt;/groupId&gt;
    &lt;artifactId&gt;pangu-dubbo-spring-boot-starter&lt;/artifactId&gt;
&lt;/dependency&gt;
</code></pre></div><div value="dependency3" label="网关模块"><pre><code class="language-jsx">&lt;dependency&gt;
    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
    &lt;artifactId&gt;spring-boot-starter-webflux&lt;/artifactId&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
    &lt;groupId&gt;org.apache.shenyu&lt;/groupId&gt;
    &lt;artifactId&gt;shenyu-spring-boot-starter-gateway&lt;/artifactId&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
    &lt;groupId&gt;org.apache.shenyu&lt;/groupId&gt;
    &lt;artifactId&gt;shenyu-spring-boot-starter-sync-data-websocket&lt;/artifactId&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
    &lt;groupId&gt;org.apache.shenyu&lt;/groupId&gt;
    &lt;artifactId&gt;shenyu-spring-boot-starter-plugin-apache-dubbo&lt;/artifactId&gt;
&lt;/dependency&gt;
</code></pre></div></div><p>:::tip
基于 ShenYu 网关开发模式不需要引入 Dubbo 服务接口 Jar，网关会根据服务接口的元数据信息，泛化调用 Dubbo 服务接口。服务接口的元数据信息则根据 Dubbo 服务应用中的配置自动上传到 ShenYu 网关管理系统。此内容在下文会继续讲解。
:::</p><h3>本地配置</h3><blockquote><p>为便于理解，本文基于本地配置的方式编写。若改为标准的 Nacos 配置中心模式，请参阅：<a href="/docs/advanced-guide/nacos-config-center">配置中心</a> 章节。</p></blockquote><pre><code class="language-jsx">server:
  port: 9090

spring:
  main:
    allow-bean-definition-overriding: true

shenyu:
  cross:
    enabled: true
    allowedHeaders:
    allowedMethods: &quot;*&quot;
    allowedOrigin: &quot;*&quot;
    allowedExpose: &quot;*&quot;
    maxAge: &quot;18000&quot;
    allowCredentials: true
  switchConfig:
    local: true
  file:
    enabled: true
    maxSize : 10
  sync:
    websocket:
      urls: ${shenyu.websocket.urls:ws://localhost:9095/websocket}
  dubbo:
    parameter: multi
  exclude:
    enabled: false
    paths:
      - /favicon.ico
  extPlugin:
    path:
    enabled: true
    threads: 1
    scheduleTime: 300
    scheduleDelay: 30
  scheduler:
    enabled: false
    type: fixed
    threads: 16
  upstreamCheck:
    enabled: false
    timeout: 3000
    healthyThreshold: 1
    unhealthyThreshold: 1
    interval: 5000
    printEnabled: true
    printInterval: 60000
</code></pre><h4>关键配置项说明</h4><ul><li><strong>shenyu.sync.websocket.urls</strong><br/>表示网关和 ShenYu Admin 之间使用 Websocket 的方式进行数据同步，这里是配置 ShenYu Admin 提供的 Websocket 数据同步服务的地址（支持集群，逗号分割）。</li></ul><p>:::info
上表中提到到 ShenYu Admin 是 ShenYu 网关框架的配置 &amp; 元数据管理后台。这里包含了网关模块自己的配置信息也包含了后台服务接口元数据信息，这理的配置信息和元数据信息需要和网关模块同步。ShenYu 支持多种数据同步方案，Websocket 只是盘古开发选用的一种缺省方案。
:::</p><h3>调用微服务接口</h3><p>基于 ShenYu 的网关开发模式既不需要引入服务接口 JAR，也不需要编写具体的调用代码。完全由网关根据服务接口元数据进行 Dubbo 泛化调用。</p><p>:::caution 那么问题来了，网关是如何知道 Dubbo 服务接口元数据的呢？</p><ul><li>通过 ShenYu Admin 后台系统，『基础配置-&gt;元数据管理』菜单，手工新增每一个接口的元数据，然后将数据自动同步到网关模块。（不建议，量大的话太繁琐）</li><li>对Dubbo服务提供者增加 ShenYu Client 支持，通过在接口方法上使用注解 <code>@ShenyuDubboClient</code> 来自动采集上传接口元数据到 ShenYu Admin，然后将数据自动同步到网关模块。（具体实现见下文所述）
:::</li></ul><h4>改造 Dubbo 服务端，自动上传接口元数据</h4><p>对原 Dubbo 服务端做一些配置变更，使其能自动将接口元数据上传到 ShenYu Admin 后台系统。
<strong>安装 ShenYu Client 依赖包</strong></p><pre><code class="language-jsx">&lt;dependency&gt;
    &lt;groupId&gt;org.apache.shenyu&lt;/groupId&gt;
    &lt;artifactId&gt;shenyu-spring-boot-starter-client-apache-dubbo&lt;/artifactId&gt;
&lt;/dependency&gt;
</code></pre><p><strong>增加配置项</strong></p><pre><code class="language-jsx">shenyu.client.register-type=http
shenyu.client.server-lists=${shenyu.server-lists:http://localhost:9095}
shenyu.client.props.contextPath=/dubbo
</code></pre><ul><li><strong>shenyu.client.register-type</strong><br/>服务接口元数据采集方式，可选 http 直连模式或配置中心 zookeeper、etcd、consul 和 nacos。盘古开发采集接口元数据缺省选择 http 直接 ShenYu Admin 的方式。</li><li><strong>shenyu.client.server-lists</strong><br/>ShenYu Admin 地址或配置中心地址。集群时多个地址用逗号分开。</li><li><strong>shenyu.client.props.contextPath</strong><br/>本服务在网关中的路由前缀,可自定义按需配置。</li></ul><p><strong>自动上报服务接口元数据</strong><br/>
<!-- -->在 Dubbo 服务实现类的方法上使用注解 <code>@ShenyuDubboClient</code> 标记，表示该接口方法元数据自动上传到 ShenYu Admin。如下代码所示。</p><pre><code class="language-jsx">@Service(version = &quot;1.0.0&quot;, group = &quot;pangu-examples-dubbo-gateway-service&quot;)
public class UserServiceImpl implements UserService {

    @Override
    @ShenyuDubboClient(path = &quot;/findUserEntity&quot;, desc = &quot;查询用户信息&quot;)
    public UserEntity findUserEntity(Long id) {
        ...
        return userEntity;
    }
}
</code></pre><p><strong>配置网关泛化调用 Dubbo 服务所需的注册中心地址</strong><br/>
<!-- -->通过 ShenYu Admin 后台系统『基础配置-&gt;插件管理』菜单，启用 <code>dubbo插件</code> 并填入注册中心地址。比如，我测试用的注册中心地址：<code>nacos://169.188.88.140:1688?namespace=pangu-dev</code>。如下图所示。</p><p><img src="/resources/doc/4-pangu-framework-shenyu-dubbo.png" alt="盘古框架网关"/></p><p><strong>重启服务提供者</strong>  </p><ul><li>进入 ShenYu Admin 后台系统的『基础配置-&gt;元数据管理』菜单，会看到自动上报的服务元数据信息。如下图所示。</li></ul><p><img src="/resources/doc/2-pangu-framework-shenyu-metadata.png" alt="盘古开发网关"/></p><ul><li>进入 ShenYu Admin 后台系统的『插件列表-&gt; proxy -&gt; dubbo』菜单，会看到自动注册的选择器和规则信息。如下图所示。</li></ul><p><img src="/resources/doc/3-pangu-framework-shenyu-plugin.png" alt="盘古开发网关"/></p><h3>启动入口</h3><pre><code class="language-jsx">@SpringBootApplication
public class WebApiGatewayApplication {
    public static void main(String[] args) {
        PanGuApplicationBuilder.init(WebApiGatewayApplication.class).run(args);
    }
}
</code></pre><h3>网关请求URL</h3><p>至此，网关就可以调用 Dubbo 服务了。但是，如何确定 Dubbo 服务对应的请求 url 地址呢？</p><ul><li>由网关模块配置文件可知网关应用端口是 <code>9090</code>。</li><li>Dubbo 服务的配置项 shenyu.client.props.contextPath 为 <code>/dubbo</code>。</li><li>Dubbo 方法通过 @ShenyuDubboClient 标记的 path 属性为：<code>/findUserEntity</code>。  </li></ul><p>综上，Dubbo 服务 UserService#findUserEntity 的完整请求地址为：<code>http://localhost:9090/dubbo/findUserEntity</code>。</p><h4>参数说明</h4><p>通过 http 协议，post 方式访问网关。在 http body 中传入 json 格式的参数。</p><h4>请求示例</h4><pre><code class="language-jsx" metastring="title=&quot;CURL脚本&quot;" title="&quot;CURL脚本&quot;">curl --location --request POST &#x27;http://127.0.0.1:9090/dubbo/findUserEntity&#x27; \
--header &#x27;Content-Type: application/json&#x27; \
--data &#x27;{id=1}&#x27;
</code></pre><pre><code class="language-jsx" metastring="title=&quot;返回结果&quot;" title="&quot;返回结果&quot;">{
    &quot;code&quot;: 200,
    &quot;message&quot;: &quot;Access to success!&quot;,
    &quot;data&quot;: {
        &quot;name&quot;: &quot;云南码农大熊&quot;,
        &quot;id&quot;: 1,
        &quot;userType&quot;: 2,
    }
}
</code></pre><h3>本范例源码</h3><ul><li><a href="https://gitee.com/pulanos/pangu-framework/tree/master/pangu-examples/pangu-examples-dubbo-api">pangu-examples-dubbo-api</a>：Dubbo 服务接口包</li><li><a href="https://gitee.com/pulanos/pangu-framework/tree/master/pangu-examples/pangu-examples-dubbo-gateway-shenyu-service">pangu-examples-dubbo-gateway-shenyu-service</a>：Dubbo 服务提供者（支持接口元数据上传到网关系统）</li><li><a href="https://gitee.com/pulanos/pangu-framework/tree/master/pangu-examples/pangu-examples-webapi-gateway-shenyu-based">pangu-examples-webapi-gateway-shenyu-based</a>：基于 ShenYu 网关将 Dubbo 服务发布为 HTTP 接口</li></ul><h2>参考文献</h2><ul><li><a href="/docs/quick-start/how-to-create-http-api">如何发布微服务 (API 网关)</a></li><li><a href="/docs/intro">盘古开发框架简介</a></li></ul>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[盘古开发框架文档排版指南]]></title>
            <link>https://pulanos.gitee.io/pangu-framework/blog/chinese-copywriting-guidelines</link>
            <guid>chinese-copywriting-guidelines</guid>
            <pubDate>Tue, 18 Jan 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[盘古开发框架文档排版指南]]></description>
            <content:encoded><![CDATA[<p>编制此排版指南的目的是统一和优化「盘古开发框架」相关中文文案排版格式，降低用户阅读成本，增强网站气质，提升品牌影响力。</p><h2>空格</h2><p>「有研究显示，打字时候不喜欢在中文和英文之间加空格的人，感情路都走得很辛苦。有七成的比例会在 34 岁的时候跟自己不爱的人结婚，而其余三成的人最后只能把遗产留给自己的猫。毕竟爱情跟书写都需要适时地留白。」摘录自 <a href="https://github.com/vinta/pangu.js#readme">vinta/pangu.js</a>。</p><h3>中英文之间增加空格</h3><p><strong>正确</strong> </p><blockquote><p>盘古开发框架基于 Apache-2.0 协议开源发布，且是免费的。</p></blockquote><p><strong>错误</strong></p><blockquote><p>盘古开发框架基于Apache-2.0协议开源发布，且是免费的。</p></blockquote><h3>中文与数字之间增加空格</h3><p><strong>正确</strong> </p><blockquote><p>盘古开发框架在 GitEE 网站上已经有 2500 个 Stars 了。</p></blockquote><p><strong>错误</strong></p><blockquote><p>盘古开发框架在 GitEE 网站上已经有2500个 Stars 了。</p></blockquote><h3>数字与单位之间增加空格</h3><p><strong>正确</strong> </p><blockquote><p>我的计算机有 16 GB 内存和 512 GB 固态存储。</p></blockquote><p><strong>错误</strong></p><blockquote><p>我的计算机有 16GB 内存和 512GB 固态存储。</p></blockquote><h3>链接与字符之间增加空格</h3><p><strong>正确</strong> </p><blockquote><p>通过我们的 <a href="/docs/community">开发者社区</a> 寻求更多帮助。</p></blockquote><p><strong>错误</strong></p><blockquote><p>通过我们的<a href="/docs/community">开发者社区</a>寻求更多帮助。</p></blockquote><h3>全角标点与字符之间不加空格</h3><p><strong>正确</strong> </p><blockquote><p>我自从用上了 Manjaro Linux，再也不用面对 Windows 恶心的蓝屏了。</p></blockquote><p><strong>错误</strong></p><blockquote><p>我自从用上了 Manjaro Linux ，再也不用面对 Windows 恶心的蓝屏了。</p></blockquote><h2>标点符号</h2><h3>不重复使用标点符号</h3><p><strong>正确</strong> </p><blockquote><p>大熊，你的程序怎么又出 bug 了？</p></blockquote><blockquote><p>大熊尽然说：让我重启电脑试试？！</p></blockquote><p><strong>错误</strong></p><blockquote><p>大熊，你的程序怎么又出 bug 了？？？</p></blockquote><blockquote><p>大熊尽然说：让我重启电脑试试？！！</p></blockquote><h3>中文使用全角标点</h3><p><strong>正确</strong> </p><blockquote><p>嗨！你知道吗？今天前台的小妹跟我说「喵」了哎！</p></blockquote><p><strong>错误</strong></p><blockquote><p>嗨! 你知道嘛? 今天前台的小妹跟我说 “喵” 了哎!</p></blockquote><h3>英文使用半角标点</h3><p><strong>正确</strong> </p><blockquote><p>乔布斯那句话是怎么说的？「Stay hungry, Stay foolish.」</p></blockquote><p><strong>错误</strong></p><blockquote><p>乔布斯那句话是怎么说的？「Stay hungry，Stay foolish。」</p></blockquote><h2>名词</h2><h3>使用正确的大小写</h3><p>大小写相关用法原属于英文书写范畴，但部分专有名词以其官方书写规范为准。（如：GitEE、GitHub、PanGu Dev Framework等）</p><p><strong>正确</strong> </p><blockquote><p>盘古开发框架（PanGu Dev Framework）的代码托管到了国内 Gitee 和 国外 GitHub 平台。</p></blockquote><p><strong>错误</strong></p><blockquote><p>盘古开发框架（Pangu Dev Framework）的代码托管到了国内 gitee 和 国外 Github 平台。</p></blockquote><h3>不使用不地道的缩写</h3><p><strong>正确</strong> </p><blockquote><p>我们需要一位熟悉 JavaScript、HTML5、Element Plus 和 PanGu Dev Framework 的全栈开发者。</p></blockquote><p><strong>错误</strong></p><blockquote><p>我们需要一位熟悉 Js、h5、element+ 和 PGDF 的全栈开发者。</p></blockquote><h2>其它</h2><h3>段首不缩进</h3><p><strong>正确</strong> </p><blockquote><p>盘古开发框架是完全独立于 Spring Cloud 生态的一套轻量灵活、成熟可靠的工业级分布式微服务开发和治理框架（兼容垂直单体分层架构)。它基于 <a href="https://www.apache.org/licenses/LICENSE-2.0">Apache-2.0</a> 协议<strong>开源</strong>发布，且是<strong>免费</strong>的。</p></blockquote><p><strong>错误</strong></p><blockquote><p> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->盘古开发框架是完全独立于 Spring Cloud 生态的一套轻量灵活、成熟可靠的工业级分布式微服务开发和治理框架（兼容垂直单体分层架构)。它基于 <a href="https://www.apache.org/licenses/LICENSE-2.0">Apache-2.0</a> 协议<strong>开源</strong>发布，且是<strong>免费</strong>的。</p></blockquote><h2>参考文献</h2><ul><li><a href="https://github.com/sparanoid/chinese-copywriting-guidelines/blob/master/README.zh-Hans.md">sparanoid/chinese-copywriting-guidelines</a></li><li><a href="https://github.com/vinta/pangu.js#readme">vinta/pangu.js</a></li></ul>]]></content:encoded>
        </item>
    </channel>
</rss>