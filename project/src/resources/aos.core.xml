<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc" xmlns:tx="http://www.springframework.org/schema/tx" xmlns:jpa="http://www.springframework.org/schema/data/jpa"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.2.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
		http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa-1.3.xsd"
	default-lazy-init="true">

	<description>SpringBean配置文件</description>

	<!-- 加载属性配置文件 -->
	<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations" value="classpath:jdbc.properties" />
	</bean>

	<!-- Spring服务组件扫描(排除@Controller相关组件) -->
	<!-- 请将com.mycorp.mysystem.**改为你的项目扫描路径 -->
	<context:component-scan base-package="cn.osworks.aos;com.mycorp.mysystem" use-default-filters="false">
		<context:include-filter type="annotation" expression="org.springframework.stereotype.Service" />
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller" />
		<context:exclude-filter type="annotation" expression="org.springframework.web.bind.annotation.ControllerAdvice" />
	</context:component-scan>

	<!-- 平台缺省 JDBC 数据源 -->
	<bean id="dataSource.sys" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
		<property name="driverClassName" value="${jdbc.driver}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<!--initialSize: 初始连接数-->
		<property name="initialSize" value="5" />
		<!--minIdle: 池中自小空闲连接数-->
		<property name="minIdle" value="5" />
		<!--maxIdle: 池中最大空闲连接数-->
		<property name="maxIdle" value="10" />
		<!--maxActive: 最大活动链接-->
		<property name="maxActive" value="20" />
		<!--removeAbandoned: 是否自动回收超时连接-->
		<property name="removeAbandoned" value="true" />
		<!--removeAbandonedTimeout: 超时时间(以秒数为单位)-->  
		<property name="removeAbandonedTimeout" value="180" />
		<!--maxWait: 当没有可用连接时，连接池等待连接释放的最大时间，超过该时间限制会抛出异常，如果设置-1表示无限等待。以毫秒为单位。-->  
		<property name="maxWait" value="120000" />
		<property name="logAbandoned" value="true" />
		<!-- 每timeBetweenEvictionRunsMillis毫秒检查一次连接池中空闲的连接，把空闲时间超过minEvictableIdleTimeMillis毫秒的连接断开 -->
		<!-- minEvictableIdleTimeMillis要小于数据库的最大空闲等待断开时间（如部分mysql版本的缺省空闲8小时则自动断开连接等)  -->
		<property name="validationQuery" value="${jdbc.vsql}" />
		<property name="timeBetweenEvictionRunsMillis" value="3600000" /> <!-- 1小时 -->
		<property name="minEvictableIdleTimeMillis" value="18000000" /> <!-- 5小时 -->
		<!-- 让空闲链接回收器(如果有)进行有效性检测 -->
		<property name="testWhileIdle" value="true" />
		<!-- 从连接池之取出时进行有效性检测 -->
		<property name="testOnBorrow" value="true" />
		<!-- 归还连接池之前进行有效性检测 -->
		<property name="testOnReturn" value="true" />
	</bean>

	<!-- 平台缺省数据源 JDBC事务管理器 -->
	<bean id="transactionManager.sys" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource.sys" />
	</bean>

	<!-- 注解驱动的声明式事务管理 -->
	<tx:annotation-driven transaction-manager="transactionManager.sys" />

	<!-- 平台缺省数据源 SqlSessionFactory配置 -->
	<bean id="sqlSessionFactory.sys" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource.sys" />
		<!-- 请将com.mycorp.mysystem.**改为你的项目扫描路径 -->
		<property name="typeAliasesPackage" value="cn.osworks.aos;com.mycorp.mysystem" />
		<property name="mapperLocations" value="classpath:**/*Mapper.xml" />
		<property name="configLocation" value="classpath:aos.mybatis.cfg.xml" />
	</bean>

	<!-- 扫描实体数据访问对象Mapper。!待解决。这会导致Mybatis的SQLMapper文件校验出错信息打印输出的问题 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<!-- 请将com.mycorp.mysystem.**改为你的项目扫描路径 -->
		<property name="basePackage" value="cn.osworks.aos;com.mycorp.mysystem" />
		<property name="annotationClass" value="cn.osworks.aos.core.annotation.Mapper" />
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory.sys" />
	</bean>

	<!-- 平台缺省数据源的SQL通用访问接口 -->
	<bean id="sysDao" class="cn.osworks.aos.core.dao.SqlDao">
		<property name="sqlSessionFactory" ref="sqlSessionFactory.sys" />
	</bean>

	<!-- ID服务组件 -->
	<bean id="idService" class="cn.osworks.aos.core.id.IdService">
		<property name="aos_sys_sequenceMapper" ref="aos_sys_sequenceMapper" />
	</bean>

	<!-- ================= 演示模块使用的数据源>> ======================= -->
	<bean id="dataSource.demo" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
		<property name="driverClassName" value="org.h2.Driver" />
		<property name="url" value="jdbc:h2:./webapp/data/aos" />
	</bean>
	<bean id="sqlSessionFactory.demo" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource.demo" />
		<property name="typeAliasesPackage" value="cn.osworks.aos.demo" />
		<property name="mapperLocations" value="classpath:cn/osworks/aos/demo/**/*Mapper.xml" />
		<property name="configLocation" value="classpath:aos.mybatis.cfg.xml" />
	</bean>
	<bean id="demoDao" class="cn.osworks.aos.core.dao.SqlDao">
		<property name="sqlSessionFactory" ref="sqlSessionFactory.demo" />
	</bean>
	<!-- ================= <<演示模块使用的数据源 ======================= -->

</beans>