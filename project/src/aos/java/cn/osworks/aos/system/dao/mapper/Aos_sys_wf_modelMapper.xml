<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 流程模型扩展表[aos_sys_wf_model]SQLMapper自动映射 -->
<!--  注意:此文件由AOS平台开发插件自动生成-禁止手工修改 2015-07-07 01:19:45 -->
<mapper namespace="cn.osworks.aos.system.dao.mapper.Aos_sys_wf_modelMapper">

	<!-- 表字段 -->
	<sql id="column">
		id_,  <!-- 流水号 -->
		model_id_,  <!-- 模型id -->
		create_type_,  <!-- 模型创建方式 -->
		name_,  <!-- 流程名称 -->
		create_user_id_,  <!-- 创建人流水号 -->
		create_user_,  <!-- 创建人 -->
		create_time_,  <!-- 创建时间 -->
		remark_  <!-- 备注 -->
	</sql>
	
	<!-- 表字段(用于外表的关联时引用) -->
	<sql id="column2">
		aos_sys_wf_model.id_,  <!-- 流水号 -->
		aos_sys_wf_model.model_id_,  <!-- 模型id -->
		aos_sys_wf_model.create_type_,  <!-- 模型创建方式 -->
		aos_sys_wf_model.name_,  <!-- 流程名称 -->
		aos_sys_wf_model.create_user_id_,  <!-- 创建人流水号 -->
		aos_sys_wf_model.create_user_,  <!-- 创建人 -->
		aos_sys_wf_model.create_time_,  <!-- 创建时间 -->
		aos_sys_wf_model.remark_  <!-- 备注 -->
	</sql>

	<!-- Where精确匹配字段 -->
	<sql id="equal">
	    <if test="id_ != null and id_ != ''">
		    AND id_ = #{id_}  <!-- 流水号 -->
		</if>
	    <if test="model_id_ != null and model_id_ != ''">
		    AND model_id_ = #{model_id_}  <!-- 模型id -->
		</if>
	    <if test="create_type_ != null and create_type_ != ''">
		    AND create_type_ = #{create_type_}  <!-- 模型创建方式 -->
		</if>
	    <if test="name_ != null and name_ != ''">
		    AND name_ = #{name_}  <!-- 流程名称 -->
		</if>
	    <if test="create_user_id_ != null and create_user_id_ != ''">
		    AND create_user_id_ = #{create_user_id_}  <!-- 创建人流水号 -->
		</if>
	    <if test="create_user_ != null and create_user_ != ''">
		    AND create_user_ = #{create_user_}  <!-- 创建人 -->
		</if>
	    <if test="create_time_ != null and create_time_ != ''">
		    AND create_time_ = #{create_time_}  <!-- 创建时间 -->
		</if>
	    <if test="remark_ != null and remark_ != ''">
		    AND remark_ = #{remark_}  <!-- 备注 -->
		</if>
	</sql>
	
	<!-- Where模糊匹配字段 -->
	<sql id="like">
	    <if test="id_ != null and id_ != ''">
		    AND id_ like '%${id_}%'  <!-- 流水号 -->
		</if>
	    <if test="model_id_ != null and model_id_ != ''">
		    AND model_id_ like '%${model_id_}%'  <!-- 模型id -->
		</if>
	    <if test="create_type_ != null and create_type_ != ''">
		    AND create_type_ like '%${create_type_}%'  <!-- 模型创建方式 -->
		</if>
	    <if test="name_ != null and name_ != ''">
		    AND name_ like '%${name_}%'  <!-- 流程名称 -->
		</if>
	    <if test="create_user_id_ != null and create_user_id_ != ''">
		    AND create_user_id_ like '%${create_user_id_}%'  <!-- 创建人流水号 -->
		</if>
	    <if test="create_user_ != null and create_user_ != ''">
		    AND create_user_ like '%${create_user_}%'  <!-- 创建人 -->
		</if>
	    <if test="create_time_ != null and create_time_ != ''">
		    AND create_time_ like '%${create_time_}%'  <!-- 创建时间 -->
		</if>
	    <if test="remark_ != null and remark_ != ''">
		    AND remark_ like '%${remark_}%'  <!-- 备注 -->
		</if>
	</sql>

	<!-- 插入一个数据持久化对象(含所有字段) -->
	<insert id="insertAll" parameterType="Aos_sys_wf_modelPO">
		INSERT INTO aos_sys_wf_model (
		    <include refid="column" />
		)
		VALUES (
		#{id_, jdbcType=VARCHAR},  <!-- 流水号 -->
		#{model_id_, jdbcType=VARCHAR},  <!-- 模型id -->
		#{create_type_, jdbcType=VARCHAR},  <!-- 模型创建方式 -->
		#{name_, jdbcType=VARCHAR},  <!-- 流程名称 -->
		#{create_user_id_, jdbcType=VARCHAR},  <!-- 创建人流水号 -->
		#{create_user_, jdbcType=VARCHAR},  <!-- 创建人 -->
		#{create_time_, jdbcType=VARCHAR},  <!-- 创建时间 -->
		#{remark_, jdbcType=VARCHAR}  <!-- 备注 -->
		)
	</insert>
	
	<!-- 插入一个数据持久化对象(插入字段为传入PO实体的非空属性) -->
	<insert id="insert" parameterType="Aos_sys_wf_modelPO">
		INSERT INTO aos_sys_wf_model (
		<if test="model_id_ != null and model_id_ != ''">
	          model_id_, <!-- 模型id -->
	   </if>
		<if test="create_type_ != null and create_type_ != ''">
	          create_type_, <!-- 模型创建方式 -->
	   </if>
		<if test="name_ != null and name_ != ''">
	          name_, <!-- 流程名称 -->
	   </if>
		<if test="create_user_id_ != null and create_user_id_ != ''">
	          create_user_id_, <!-- 创建人流水号 -->
	   </if>
		<if test="create_user_ != null and create_user_ != ''">
	          create_user_, <!-- 创建人 -->
	   </if>
		<if test="create_time_ != null and create_time_ != ''">
	          create_time_, <!-- 创建时间 -->
	   </if>
		<if test="remark_ != null and remark_ != ''">
	          remark_, <!-- 备注 -->
	   </if>
		<if test="id_ != null and id_ != ''">
	          id_  <!-- id_ -->
	   </if>
		)VALUES(
		<if test="model_id_ != null and model_id_ != ''">
		      #{model_id_, jdbcType=VARCHAR}, <!-- 模型id -->
	    </if>
		<if test="create_type_ != null and create_type_ != ''">
		      #{create_type_, jdbcType=VARCHAR}, <!-- 模型创建方式 -->
	    </if>
		<if test="name_ != null and name_ != ''">
		      #{name_, jdbcType=VARCHAR}, <!-- 流程名称 -->
	    </if>
		<if test="create_user_id_ != null and create_user_id_ != ''">
		      #{create_user_id_, jdbcType=VARCHAR}, <!-- 创建人流水号 -->
	    </if>
		<if test="create_user_ != null and create_user_ != ''">
		      #{create_user_, jdbcType=VARCHAR}, <!-- 创建人 -->
	    </if>
		<if test="create_time_ != null and create_time_ != ''">
		      #{create_time_, jdbcType=VARCHAR}, <!-- 创建时间 -->
	    </if>
		<if test="remark_ != null and remark_ != ''">
		      #{remark_, jdbcType=VARCHAR}, <!-- 备注 -->
	    </if>
		<if test="id_ != null and id_ != ''">
		     #{id_, jdbcType=VARCHAR}  <!-- id_ -->
	    </if>
		)
	</insert>

	<!-- 根据主键修改数据持久化对象 -->
	<update id="updateByKey" parameterType="Aos_sys_wf_modelPO">
		UPDATE aos_sys_wf_model
		<set>
			<if test="id_ != null">
				id_ = #{id_},  <!-- 流水号 -->
			</if>
			<if test="model_id_ != null">
				model_id_ = #{model_id_},  <!-- 模型id -->
			</if>
			<if test="create_type_ != null">
				create_type_ = #{create_type_},  <!-- 模型创建方式 -->
			</if>
			<if test="name_ != null">
				name_ = #{name_},  <!-- 流程名称 -->
			</if>
			<if test="create_user_id_ != null">
				create_user_id_ = #{create_user_id_},  <!-- 创建人流水号 -->
			</if>
			<if test="create_user_ != null">
				create_user_ = #{create_user_},  <!-- 创建人 -->
			</if>
			<if test="create_time_ != null">
				create_time_ = #{create_time_},  <!-- 创建时间 -->
			</if>
			<if test="remark_ != null">
				remark_ = #{remark_},  <!-- 备注 -->
			</if>
		</set>
		WHERE  id_ = #{id_}
	</update>

	<!-- 根据主键查询并返回数据持久化对象 -->
	<select id="selectByKey" resultType="Aos_sys_wf_modelPO">
		SELECT
		<include refid="column" />
		FROM aos_sys_wf_model WHERE  id_ = #{id_}
	</select>

	<!-- 根据唯一组合条件查询并返回数据持久化对象 -->
	<select id="selectOne" parameterType="Dto" resultType="Aos_sys_wf_modelPO">
		SELECT
		    <include refid="column" />
		FROM aos_sys_wf_model
		<where>
		    <include refid="equal" />
		</where>		
	</select>

	<!-- 根据Dto查询并返回数据持久化对象集合 -->
	<select id="list" parameterType="Dto" resultType="Aos_sys_wf_modelPO">
		SELECT
			<include refid="column" />	
		FROM aos_sys_wf_model
		<where>
		    <include refid="equal" />
		</where>	
	</select>

	<!-- 根据Dto查询并返回分页数据持久化对象集合 -->
	<select id="listPage" parameterType="Dto" resultType="Aos_sys_wf_modelPO" useCache="false">
	    SELECT
			<include refid="column" />	
		FROM aos_sys_wf_model
		<where>
		    <include refid="equal" />
		</where>	
	</select>
	
	<!-- 根据Dto模糊查询并返回数据持久化对象集合(字符型字段模糊匹配，其余字段精确匹配) -->
	<select id="like" parameterType="Dto" resultType="Aos_sys_wf_modelPO">
		SELECT
			<include refid="column" />	
		FROM aos_sys_wf_model
		<where>
		    <include refid="like" />
		</where>	
	</select>

	<!-- 根据Dto模糊查询并返回分页数据持久化对象集合(字符型字段模糊匹配，其余字段精确匹配) -->
	<select id="likePage" parameterType="Dto" resultType="Aos_sys_wf_modelPO" useCache="false">
	    SELECT
			<include refid="column" />	
		FROM aos_sys_wf_model
		<where>
		    <include refid="like" />
		</where>	
	</select>

	<!-- 根据主键删除数据持久化对象 -->
	<delete id="deleteByKey">
		DELETE FROM aos_sys_wf_model WHERE  id_ = #{id_}
	</delete>
	
	<!-- 根据Dto统计行数 -->
	<select id="rows" resultType="Integer" parameterType="Dto">
		SELECT COUNT(1) AS aos_rows_ FROM aos_sys_wf_model
		<where>
		    <include refid="equal" />
		</where>
	</select>
	
	<!-- 根据数学表达式进行数学运算 -->
	<select id="calc" parameterType="Dto" resultType="String">
		SELECT
			${_expr}
		FROM aos_sys_wf_model
		<where>
		    <include refid="equal" />
		</where>
	</select>
	
</mapper>