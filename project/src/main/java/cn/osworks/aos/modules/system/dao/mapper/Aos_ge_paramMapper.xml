<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 参数表[aos_ge_param]SQLMapper自动映射 (注意:此映射文件自动生成-禁止手工修改) 2015-01-05 21:02:15 -->
<mapper namespace="cn.osworks.aos.modules.system.dao.mapper.Aos_ge_paramMapper">
	
    <!-- 启用MyBatis二级缓存(以该Mapper文件的namespace属性作为一个缓存域) 。
	       同一缓存域下的Select语句结果集将被缓存；delete、update、insert语句执行则此缓存域的缓存将被刷新。
	       提示：只对一些频繁读取的基础数据、配置数据开启mybatis的二级缓存。大数据量的业务数据如果需要缓存请使用第三方缓存机制 -->
	<cache eviction="LRU" size="1024" readOnly="false" />

	<!-- 表字段 -->
	<sql id="column">
		id_,  <!-- ID -->
		key_,  <!-- 参数键 -->
		value_,  <!-- 参数值 -->
		catalog_id_,  <!-- 所属分类流水号 -->
		remark_,  <!-- 备注 -->
		catalog_cascade_id_,  <!-- 所属分类节点语义ID -->
		name_,  <!-- 参数名称 -->
		is_overwrite_,  <!-- 是否可覆盖 -->
		overwrite_field_  <!-- 覆盖来源字段 -->
	</sql>
	
	<!-- 表字段(用于外表的关联时引用) -->
	<sql id="column2">
		aos_ge_param.id_,  <!-- ID -->
		aos_ge_param.key_,  <!-- 参数键 -->
		aos_ge_param.value_,  <!-- 参数值 -->
		aos_ge_param.catalog_id_,  <!-- 所属分类流水号 -->
		aos_ge_param.remark_,  <!-- 备注 -->
		aos_ge_param.catalog_cascade_id_,  <!-- 所属分类节点语义ID -->
		aos_ge_param.name_,  <!-- 参数名称 -->
		aos_ge_param.is_overwrite_,  <!-- 是否可覆盖 -->
		aos_ge_param.overwrite_field_  <!-- 覆盖来源字段 -->
	</sql>


	<!-- Where精确匹配字段 -->
	<sql id="equal">
	    <if test="id_ != null and id_ != ''">
		    AND id_ = #{id_}  <!-- ID -->
		</if>
	    <if test="key_ != null and key_ != ''">
		    AND key_ = #{key_}  <!-- 参数键 -->
		</if>
	    <if test="value_ != null and value_ != ''">
		    AND value_ = #{value_}  <!-- 参数值 -->
		</if>
	    <if test="catalog_id_ != null and catalog_id_ != ''">
		    AND catalog_id_ = #{catalog_id_}  <!-- 所属分类流水号 -->
		</if>
	    <if test="remark_ != null and remark_ != ''">
		    AND remark_ = #{remark_}  <!-- 备注 -->
		</if>
	    <if test="catalog_cascade_id_ != null and catalog_cascade_id_ != ''">
		    AND catalog_cascade_id_ = #{catalog_cascade_id_}  <!-- 所属分类节点语义ID -->
		</if>
	    <if test="name_ != null and name_ != ''">
		    AND name_ = #{name_}  <!-- 参数名称 -->
		</if>
	    <if test="is_overwrite_ != null and is_overwrite_ != ''">
		    AND is_overwrite_ = #{is_overwrite_}  <!-- 是否可覆盖 -->
		</if>
	    <if test="overwrite_field_ != null and overwrite_field_ != ''">
		    AND overwrite_field_ = #{overwrite_field_}  <!-- 覆盖来源字段 -->
		</if>
	</sql>
	
	<!-- Where模糊匹配字段 -->
	<sql id="like">
	    <if test="id_ != null and id_ != ''">
		    AND id_ like '%${id_}%'  <!-- ID -->
		</if>
	    <if test="key_ != null and key_ != ''">
		    AND key_ like '%${key_}%'  <!-- 参数键 -->
		</if>
	    <if test="value_ != null and value_ != ''">
		    AND value_ like '%${value_}%'  <!-- 参数值 -->
		</if>
	    <if test="catalog_id_ != null and catalog_id_ != ''">
		    AND catalog_id_ like '%${catalog_id_}%'  <!-- 所属分类流水号 -->
		</if>
	    <if test="remark_ != null and remark_ != ''">
		    AND remark_ like '%${remark_}%'  <!-- 备注 -->
		</if>
	    <if test="catalog_cascade_id_ != null and catalog_cascade_id_ != ''">
		    AND catalog_cascade_id_ like '%${catalog_cascade_id_}%'  <!-- 所属分类节点语义ID -->
		</if>
	    <if test="name_ != null and name_ != ''">
		    AND name_ like '%${name_}%'  <!-- 参数名称 -->
		</if>
	    <if test="is_overwrite_ != null and is_overwrite_ != ''">
		    AND is_overwrite_ like '%${is_overwrite_}%'  <!-- 是否可覆盖 -->
		</if>
	    <if test="overwrite_field_ != null and overwrite_field_ != ''">
		    AND overwrite_field_ like '%${overwrite_field_}%'  <!-- 覆盖来源字段 -->
		</if>
	</sql>

	<!-- 插入一个数据持久化对象(含所有字段) -->
	<insert id="insertAll" parameterType="Aos_ge_paramPO">
		INSERT INTO aos_ge_param (
		    <include refid="column" />
		)
		VALUES (
		#{id_, jdbcType=VARCHAR},  <!-- ID -->
		#{key_, jdbcType=VARCHAR},  <!-- 参数键 -->
		#{value_, jdbcType=VARCHAR},  <!-- 参数值 -->
		#{catalog_id_, jdbcType=VARCHAR},  <!-- 所属分类流水号 -->
		#{remark_, jdbcType=VARCHAR},  <!-- 备注 -->
		#{catalog_cascade_id_, jdbcType=VARCHAR},  <!-- 所属分类节点语义ID -->
		#{name_, jdbcType=VARCHAR},  <!-- 参数名称 -->
		#{is_overwrite_, jdbcType=VARCHAR},  <!-- 是否可覆盖 -->
		#{overwrite_field_, jdbcType=VARCHAR}  <!-- 覆盖来源字段 -->
		)
	</insert>
	
	<!-- 插入一个数据持久化对象(插入字段为传入PO实体的非空属性) -->
	<insert id="insert" parameterType="Aos_ge_paramPO">
		INSERT INTO aos_ge_param (
		<if test="key_ != null and key_ != ''">
	      key_,  <!-- 参数键 -->
	   </if>
		<if test="value_ != null and value_ != ''">
	      value_,  <!-- 参数值 -->
	   </if>
		<if test="catalog_id_ != null and catalog_id_ != ''">
	      catalog_id_,  <!-- 所属分类流水号 -->
	   </if>
		<if test="remark_ != null and remark_ != ''">
	      remark_,  <!-- 备注 -->
	   </if>
		<if test="catalog_cascade_id_ != null and catalog_cascade_id_ != ''">
	      catalog_cascade_id_,  <!-- 所属分类节点语义ID -->
	   </if>
		<if test="name_ != null and name_ != ''">
	      name_,  <!-- 参数名称 -->
	   </if>
		<if test="is_overwrite_ != null and is_overwrite_ != ''">
	      is_overwrite_,  <!-- 是否可覆盖 -->
	   </if>
		<if test="overwrite_field_ != null and overwrite_field_ != ''">
	      overwrite_field_,  <!-- 覆盖来源字段 -->
	   </if>
		<if test="id_ != null and id_ != ''">
	      id_  <!-- ID -->
	   </if>
		)
		VALUES (
		<if test="key_ != null and key_ != ''">
		  #{key_, jdbcType=VARCHAR},  <!-- 参数键 -->
	    </if>
		<if test="value_ != null and value_ != ''">
		  #{value_, jdbcType=VARCHAR},  <!-- 参数值 -->
	    </if>
		<if test="catalog_id_ != null and catalog_id_ != ''">
		  #{catalog_id_, jdbcType=VARCHAR},  <!-- 所属分类流水号 -->
	    </if>
		<if test="remark_ != null and remark_ != ''">
		  #{remark_, jdbcType=VARCHAR},  <!-- 备注 -->
	    </if>
		<if test="catalog_cascade_id_ != null and catalog_cascade_id_ != ''">
		  #{catalog_cascade_id_, jdbcType=VARCHAR},  <!-- 所属分类节点语义ID -->
	    </if>
		<if test="name_ != null and name_ != ''">
		  #{name_, jdbcType=VARCHAR},  <!-- 参数名称 -->
	    </if>
		<if test="is_overwrite_ != null and is_overwrite_ != ''">
		  #{is_overwrite_, jdbcType=VARCHAR},  <!-- 是否可覆盖 -->
	    </if>
		<if test="overwrite_field_ != null and overwrite_field_ != ''">
		  #{overwrite_field_, jdbcType=VARCHAR},  <!-- 覆盖来源字段 -->
	    </if>
		<if test="id_ != null and id_ != ''">
	      #{id_, jdbcType=VARCHAR}  <!-- ID -->
		</if>
		)
	</insert>

	<!-- 根据主键修改数据持久化对象 -->
	<update id="updateByKey" parameterType="Aos_ge_paramPO">
		UPDATE aos_ge_param
		<set>
			<if test="id_ != null">
				id_ = #{id_},  <!-- ID -->
			</if>
			<if test="key_ != null">
				key_ = #{key_},  <!-- 参数键 -->
			</if>
			<if test="value_ != null">
				value_ = #{value_},  <!-- 参数值 -->
			</if>
			<if test="catalog_id_ != null">
				catalog_id_ = #{catalog_id_},  <!-- 所属分类流水号 -->
			</if>
			<if test="remark_ != null">
				remark_ = #{remark_},  <!-- 备注 -->
			</if>
			<if test="catalog_cascade_id_ != null">
				catalog_cascade_id_ = #{catalog_cascade_id_},  <!-- 所属分类节点语义ID -->
			</if>
			<if test="name_ != null">
				name_ = #{name_},  <!-- 参数名称 -->
			</if>
			<if test="is_overwrite_ != null">
				is_overwrite_ = #{is_overwrite_},  <!-- 是否可覆盖 -->
			</if>
			<if test="overwrite_field_ != null">
				overwrite_field_ = #{overwrite_field_},  <!-- 覆盖来源字段 -->
			</if>
		</set>
		WHERE  id_ = #{id_}
	</update>

	<!-- 根据主键查询并返回数据持久化对象 -->
	<select id="selectByKey" resultType="Aos_ge_paramPO">
		SELECT
		<include refid="column" />
		FROM aos_ge_param WHERE  id_ = #{id_}
	</select>

	<!-- 根据唯一组合条件查询并返回数据持久化对象 -->
	<select id="selectOne" parameterType="Dto" resultType="Aos_ge_paramPO">
		SELECT
		    <include refid="column" />
		FROM aos_ge_param
		<where>
		    <include refid="equal" />
		</where>		
	</select>

	<!-- 根据Dto查询并返回数据持久化对象集合 -->
	<select id="list" parameterType="Dto" resultType="Aos_ge_paramPO">
		SELECT
			<include refid="column" />	
		FROM aos_ge_param
		<where>
		    <include refid="equal" />
		</where>	
	</select>

	<!-- 根据Dto查询并返回分页数据持久化对象集合 -->
	<select id="listPage" parameterType="Dto" resultType="Aos_ge_paramPO" useCache="false">
	    SELECT
			<include refid="column" />	
		FROM aos_ge_param
		<where>
		    <include refid="equal" />
		</where>	
	</select>
	
	<!-- 根据Dto模糊查询并返回数据持久化对象集合(字符型字段模糊匹配，其余字段精确匹配) -->
	<select id="like" parameterType="Dto" resultType="Aos_ge_paramPO">
		SELECT
			<include refid="column" />	
		FROM aos_ge_param
		<where>
		    <include refid="like" />
		</where>	
	</select>

	<!-- 根据Dto模糊查询并返回分页数据持久化对象集合(字符型字段模糊匹配，其余字段精确匹配) -->
	<select id="likePage" parameterType="Dto" resultType="Aos_ge_paramPO" useCache="false">
	    SELECT
			<include refid="column" />	
		FROM aos_ge_param
		<where>
		    <include refid="like" />
		</where>	
	</select>

	<!-- 根据主键删除数据持久化对象 -->
	<delete id="deleteByKey">
		DELETE FROM aos_ge_param WHERE  id_ = #{id_}
	</delete>
	
	<!-- 根据Dto统计行数 -->
	<select id="rows" resultType="Integer" parameterType="Dto">
		SELECT COUNT(1) AS rows FROM aos_ge_param
		<where>
		    <include refid="equal" />
		</where>
	</select>
	
	<!-- 根据数学表达式进行数学运算 -->
	<select id="calc" parameterType="Dto" resultType="String">
		SELECT
			${_expr}
		FROM aos_ge_param
		<where>
		    <include refid="equal" />
		</where>
	</select>
	
</mapper>