<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- ${tableVO.comment}[${tableVO.name}]SQLMapper自动映射 (注意:此映射文件自动生成-禁止手工修改) $!sysdate -->
<mapper namespace="${package}.${tableVO.upname}Mapper">
	
#if(${tableVO.cacheEnabled})
    <!-- 启用MyBatis二级缓存(以该Mapper文件的namespace属性作为一个缓存域) 。
	       同一缓存域下的Select语句结果集将被缓存；delete、update、insert语句执行则此缓存域的缓存将被刷新。
	       提示：只对一些频繁读取的基础数据、配置数据开启mybatis的二级缓存。大数据量的业务数据如果需要缓存请使用第三方缓存机制 -->
	<cache eviction="LRU" size="1024" readOnly="false" />
#end

	<!-- 表字段 -->
	<sql id="column">
#foreach($columnVO in $columnVOs)
		${columnVO.name}#if($velocityCount != $columnVOs.size()),#end  <!-- ${columnVO.comment} -->
#end
	</sql>
	
	<!-- 表字段(用于外表的关联时引用) -->
	<sql id="column2">
#foreach($columnVO in $columnVOs)
		${tableVO.name}.${columnVO.name}#if($velocityCount != $columnVOs.size()),#end  <!-- ${columnVO.comment} -->
#end
	</sql>

##如果此表含有二进制字段
#if($hasBinaryField == "1")
	<!-- 表字段(排除二进制字段) -->
	<sql id="column3">
#foreach($columnVO in $columnVOs)
#if(${columnVO.jdbctype} != "BINARY")
		${tableVO.name}.${columnVO.name}#if($velocityCount != $columnVOs.size()),#end  <!-- ${columnVO.comment} -->
#end
#end
	</sql>
#end

	<!-- Where精确匹配字段 -->
	<sql id="equal">
#foreach($columnVO in $columnVOs)
##只对VARCHAR类型使用非空字符串测试
#if(${columnVO.jdbctype} == "VARCHAR")	
	    <if test="${columnVO.name} != null and ${columnVO.name} != ''">
#else
	   <if test="${columnVO.name} != null ">
#end
		    AND ${columnVO.name} = #{${columnVO.name}}  <!-- ${columnVO.comment} -->
		</if>
#end
	</sql>
	
	<!-- Where模糊匹配字段 -->
	<sql id="like">
#foreach($columnVO in $columnVOs)
##只对VARCHAR类型使用非空字符串测试
#if(${columnVO.jdbctype} == "VARCHAR")	
	    <if test="${columnVO.name} != null and ${columnVO.name} != ''">
#else
	   <if test="${columnVO.name} != null ">
#end
##只对VARCHAR类型启用模糊匹配
#if(${columnVO.jdbctype} == "VARCHAR")
		    AND ${columnVO.name} like '%${${columnVO.name}}%'  <!-- ${columnVO.comment} -->
#else
            AND ${columnVO.name} = '%${${columnVO.name}}%'  <!-- ${columnVO.comment} -->
#end
		</if>
#end
	</sql>

	<!-- 插入一个数据持久化对象(含所有字段) -->
	<insert id="insertAll" parameterType="${tableVO.upname}PO">
		INSERT INTO ${tableVO.name} (
		    <include refid="column" />
		)
		VALUES (
#foreach($columnVO in $columnVOs)
		#{${columnVO.name}, jdbcType=${columnVO.jdbctype}}#if($velocityCount != $columnVOs.size()),#end  <!-- ${columnVO.comment} -->
#end
		)
	</insert>
	
	<!-- 插入一个数据持久化对象(插入字段为传入PO实体的非空属性) -->
	<insert id="insert" parameterType="${tableVO.upname}PO">
		INSERT INTO ${tableVO.name} (
#foreach($columnVO in $columnVOs)
#if(!${columnVO.isPkey})
#if(${columnVO.jdbctype} == 'VARCHAR')
		<if test="${columnVO.name} != null and ${columnVO.name} != ''">
#else
		<if test="${columnVO.name} != null">
#end
	      ${columnVO.name},  <!-- ${columnVO.comment} -->
	   </if>
#end
#end
#foreach($columnVO in $pkeyColumnVOs)
#if(${columnVO.jdbctype} == 'VARCHAR')
		<if test="${columnVO.name} != null and ${columnVO.name} != ''">
#else
		<if test="${columnVO.name} != null">
#end
	      ${columnVO.name}#if($velocityCount != $pkeyColumnVOs.size()),#end  <!-- ${columnVO.comment} -->
	   </if>
#end
		)
		VALUES (
#foreach($columnVO in $columnVOs)
#if(!${columnVO.isPkey})
#if(${columnVO.jdbctype} == 'VARCHAR')
		<if test="${columnVO.name} != null and ${columnVO.name} != ''">
#else
		<if test="${columnVO.name} != null">
#end
		  #{${columnVO.name}, jdbcType=${columnVO.jdbctype}},  <!-- ${columnVO.comment} -->
	    </if>
#end
#end
#foreach($columnVO in $pkeyColumnVOs)
#if(${columnVO.jdbctype} == 'VARCHAR')
		<if test="${columnVO.name} != null and ${columnVO.name} != ''">
#else
		<if test="${columnVO.name} != null">
#end
	      #{${columnVO.name}, jdbcType=${columnVO.jdbctype}}#if($velocityCount != $pkeyColumnVOs.size()),#end  <!-- ${columnVO.comment} -->
		</if>
#end
		)
	</insert>

	<!-- 根据主键修改数据持久化对象 -->
	<update id="updateByKey" parameterType="${tableVO.upname}PO">
		UPDATE ${tableVO.name}
		<set>
#foreach($columnVO in $columnVOs)
			<if test="${columnVO.name} != null">
				${columnVO.name} = #{${columnVO.name}},  <!-- ${columnVO.comment} -->
			</if>
#end
		</set>
		WHERE ${bykeywhere}
	</update>

	<!-- 根据主键查询并返回数据持久化对象 -->
	<select id="selectByKey" resultType="${tableVO.upname}PO">
		SELECT
		<include refid="column" />
		FROM ${tableVO.name} WHERE ${bykeywhere}
	</select>

	<!-- 根据唯一组合条件查询并返回数据持久化对象 -->
	<select id="selectOne" parameterType="Dto" resultType="${tableVO.upname}PO">
		SELECT
		    <include refid="column" />
		FROM ${tableVO.name}
		<where>
		    <include refid="equal" />
		</where>		
	</select>

	<!-- 根据Dto查询并返回数据持久化对象集合 -->
	<select id="list" parameterType="Dto" resultType="${tableVO.upname}PO">
		SELECT
#if($hasBinaryField == "1")
		    <include refid="column3" />	
#else
			<include refid="column" />	
#end
		FROM ${tableVO.name}
		<where>
		    <include refid="equal" />
		</where>	
	</select>

	<!-- 根据Dto查询并返回分页数据持久化对象集合 -->
	<select id="listPage" parameterType="Dto" resultType="${tableVO.upname}PO" useCache="false">
	    SELECT
#if($hasBinaryField == "1")
		    <include refid="column3" />	
#else
			<include refid="column" />	
#end
		FROM ${tableVO.name}
		<where>
		    <include refid="equal" />
		</where>	
	</select>
	
	<!-- 根据Dto模糊查询并返回数据持久化对象集合(字符型字段模糊匹配，其余字段精确匹配) -->
	<select id="like" parameterType="Dto" resultType="${tableVO.upname}PO">
		SELECT
#if($hasBinaryField == "1")
		    <include refid="column3" />	
#else
			<include refid="column" />	
#end
		FROM ${tableVO.name}
		<where>
		    <include refid="like" />
		</where>	
	</select>

	<!-- 根据Dto模糊查询并返回分页数据持久化对象集合(字符型字段模糊匹配，其余字段精确匹配) -->
	<select id="likePage" parameterType="Dto" resultType="${tableVO.upname}PO" useCache="false">
	    SELECT
#if($hasBinaryField == "1")
		    <include refid="column3" />	
#else
			<include refid="column" />	
#end
		FROM ${tableVO.name}
		<where>
		    <include refid="like" />
		</where>	
	</select>

	<!-- 根据主键删除数据持久化对象 -->
	<delete id="deleteByKey">
		DELETE FROM ${tableVO.name} WHERE ${bykeywhere}
	</delete>
	
	<!-- 根据Dto统计行数 -->
	<select id="rows" resultType="Integer" parameterType="Dto">
		SELECT COUNT(1) AS rows FROM ${tableVO.name}
		<where>
		    <include refid="equal" />
		</where>
	</select>
	
	<!-- 根据数学表达式进行数学运算 -->
	<select id="calc" parameterType="Dto" resultType="String">
		SELECT
			${_expr}
		FROM ${tableVO.name}
		<where>
		    <include refid="equal" />
		</where>
	</select>
	
</mapper>