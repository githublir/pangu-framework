<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 分类表[aos_ge_catalog]SQLMapper自动映射 (注意:此映射文件自动生成-禁止手工修改) 2015-01-05 15:03:52 -->
<mapper namespace="cn.osworks.aos.modules.system.dao.mapper.Aos_ge_catalogMapper">
	
    <!-- 启用MyBatis二级缓存(以该Mapper文件的namespace属性作为一个缓存域) 。
	       同一缓存域下的Select语句结果集将被缓存；delete、update、insert语句执行则此缓存域的缓存将被刷新。
	       提示：只对一些频繁读取的基础数据、配置数据开启mybatis的二级缓存。大数据量的业务数据如果需要缓存请使用第三方缓存机制 -->
	<cache eviction="LRU" size="1024" readOnly="false" />

	<!-- 表字段 -->
	<sql id="column">
		id_,  <!-- ID -->
		root_key_,  <!-- 科目标识键 -->
		root_name_,  <!-- 科目名称 -->
		name_,  <!-- 分类名称 -->
		hotkey_,  <!-- 热键 -->
		parent_id_,  <!-- 父节点流水号 -->
		is_leaf_,  <!-- 是否叶子节点 -->
		is_auto_expand_,  <!-- 是否自动展开 -->
		icon_name_,  <!-- 图标文件名称 -->
		sort_no_,  <!-- 排序号 -->
		cascade_id_  <!-- 节点语义ID -->
	</sql>
	
	<!-- 表字段(用于外表的关联时引用) -->
	<sql id="column2">
		aos_ge_catalog.id_,  <!-- ID -->
		aos_ge_catalog.root_key_,  <!-- 科目标识键 -->
		aos_ge_catalog.root_name_,  <!-- 科目名称 -->
		aos_ge_catalog.name_,  <!-- 分类名称 -->
		aos_ge_catalog.hotkey_,  <!-- 热键 -->
		aos_ge_catalog.parent_id_,  <!-- 父节点流水号 -->
		aos_ge_catalog.is_leaf_,  <!-- 是否叶子节点 -->
		aos_ge_catalog.is_auto_expand_,  <!-- 是否自动展开 -->
		aos_ge_catalog.icon_name_,  <!-- 图标文件名称 -->
		aos_ge_catalog.sort_no_,  <!-- 排序号 -->
		aos_ge_catalog.cascade_id_  <!-- 节点语义ID -->
	</sql>


	<!-- Where精确匹配字段 -->
	<sql id="equal">
	    <if test="id_ != null and id_ != ''">
		    AND id_ = #{id_}  <!-- ID -->
		</if>
	    <if test="root_key_ != null and root_key_ != ''">
		    AND root_key_ = #{root_key_}  <!-- 科目标识键 -->
		</if>
	    <if test="root_name_ != null and root_name_ != ''">
		    AND root_name_ = #{root_name_}  <!-- 科目名称 -->
		</if>
	    <if test="name_ != null and name_ != ''">
		    AND name_ = #{name_}  <!-- 分类名称 -->
		</if>
	    <if test="hotkey_ != null and hotkey_ != ''">
		    AND hotkey_ = #{hotkey_}  <!-- 热键 -->
		</if>
	    <if test="parent_id_ != null and parent_id_ != ''">
		    AND parent_id_ = #{parent_id_}  <!-- 父节点流水号 -->
		</if>
	    <if test="is_leaf_ != null and is_leaf_ != ''">
		    AND is_leaf_ = #{is_leaf_}  <!-- 是否叶子节点 -->
		</if>
	    <if test="is_auto_expand_ != null and is_auto_expand_ != ''">
		    AND is_auto_expand_ = #{is_auto_expand_}  <!-- 是否自动展开 -->
		</if>
	    <if test="icon_name_ != null and icon_name_ != ''">
		    AND icon_name_ = #{icon_name_}  <!-- 图标文件名称 -->
		</if>
	   <if test="sort_no_ != null ">
		    AND sort_no_ = #{sort_no_}  <!-- 排序号 -->
		</if>
	    <if test="cascade_id_ != null and cascade_id_ != ''">
		    AND cascade_id_ = #{cascade_id_}  <!-- 节点语义ID -->
		</if>
	</sql>
	
	<!-- Where模糊匹配字段 -->
	<sql id="like">
	    <if test="id_ != null and id_ != ''">
		    AND id_ like '%${id_}%'  <!-- ID -->
		</if>
	    <if test="root_key_ != null and root_key_ != ''">
		    AND root_key_ like '%${root_key_}%'  <!-- 科目标识键 -->
		</if>
	    <if test="root_name_ != null and root_name_ != ''">
		    AND root_name_ like '%${root_name_}%'  <!-- 科目名称 -->
		</if>
	    <if test="name_ != null and name_ != ''">
		    AND name_ like '%${name_}%'  <!-- 分类名称 -->
		</if>
	    <if test="hotkey_ != null and hotkey_ != ''">
		    AND hotkey_ like '%${hotkey_}%'  <!-- 热键 -->
		</if>
	    <if test="parent_id_ != null and parent_id_ != ''">
		    AND parent_id_ like '%${parent_id_}%'  <!-- 父节点流水号 -->
		</if>
	    <if test="is_leaf_ != null and is_leaf_ != ''">
		    AND is_leaf_ like '%${is_leaf_}%'  <!-- 是否叶子节点 -->
		</if>
	    <if test="is_auto_expand_ != null and is_auto_expand_ != ''">
		    AND is_auto_expand_ like '%${is_auto_expand_}%'  <!-- 是否自动展开 -->
		</if>
	    <if test="icon_name_ != null and icon_name_ != ''">
		    AND icon_name_ like '%${icon_name_}%'  <!-- 图标文件名称 -->
		</if>
	   <if test="sort_no_ != null ">
            AND sort_no_ = '%${sort_no_}%'  <!-- 排序号 -->
		</if>
	    <if test="cascade_id_ != null and cascade_id_ != ''">
		    AND cascade_id_ like '%${cascade_id_}%'  <!-- 节点语义ID -->
		</if>
	</sql>

	<!-- 插入一个数据持久化对象(含所有字段) -->
	<insert id="insertAll" parameterType="Aos_ge_catalogPO">
		INSERT INTO aos_ge_catalog (
		    <include refid="column" />
		)
		VALUES (
		#{id_, jdbcType=VARCHAR},  <!-- ID -->
		#{root_key_, jdbcType=VARCHAR},  <!-- 科目标识键 -->
		#{root_name_, jdbcType=VARCHAR},  <!-- 科目名称 -->
		#{name_, jdbcType=VARCHAR},  <!-- 分类名称 -->
		#{hotkey_, jdbcType=VARCHAR},  <!-- 热键 -->
		#{parent_id_, jdbcType=VARCHAR},  <!-- 父节点流水号 -->
		#{is_leaf_, jdbcType=VARCHAR},  <!-- 是否叶子节点 -->
		#{is_auto_expand_, jdbcType=VARCHAR},  <!-- 是否自动展开 -->
		#{icon_name_, jdbcType=VARCHAR},  <!-- 图标文件名称 -->
		#{sort_no_, jdbcType=INTEGER},  <!-- 排序号 -->
		#{cascade_id_, jdbcType=VARCHAR}  <!-- 节点语义ID -->
		)
	</insert>
	
	<!-- 插入一个数据持久化对象(插入字段为传入PO实体的非空属性) -->
	<insert id="insert" parameterType="Aos_ge_catalogPO">
		INSERT INTO aos_ge_catalog (
		<if test="root_key_ != null and root_key_ != ''">
	      root_key_,  <!-- 科目标识键 -->
	   </if>
		<if test="root_name_ != null and root_name_ != ''">
	      root_name_,  <!-- 科目名称 -->
	   </if>
		<if test="name_ != null and name_ != ''">
	      name_,  <!-- 分类名称 -->
	   </if>
		<if test="hotkey_ != null and hotkey_ != ''">
	      hotkey_,  <!-- 热键 -->
	   </if>
		<if test="parent_id_ != null and parent_id_ != ''">
	      parent_id_,  <!-- 父节点流水号 -->
	   </if>
		<if test="is_leaf_ != null and is_leaf_ != ''">
	      is_leaf_,  <!-- 是否叶子节点 -->
	   </if>
		<if test="is_auto_expand_ != null and is_auto_expand_ != ''">
	      is_auto_expand_,  <!-- 是否自动展开 -->
	   </if>
		<if test="icon_name_ != null and icon_name_ != ''">
	      icon_name_,  <!-- 图标文件名称 -->
	   </if>
		<if test="sort_no_ != null">
	      sort_no_,  <!-- 排序号 -->
	   </if>
		<if test="cascade_id_ != null and cascade_id_ != ''">
	      cascade_id_,  <!-- 节点语义ID -->
	   </if>
		<if test="id_ != null and id_ != ''">
	      id_  <!-- ID -->
	   </if>
		)
		VALUES (
		<if test="root_key_ != null and root_key_ != ''">
		  #{root_key_, jdbcType=VARCHAR},  <!-- 科目标识键 -->
	    </if>
		<if test="root_name_ != null and root_name_ != ''">
		  #{root_name_, jdbcType=VARCHAR},  <!-- 科目名称 -->
	    </if>
		<if test="name_ != null and name_ != ''">
		  #{name_, jdbcType=VARCHAR},  <!-- 分类名称 -->
	    </if>
		<if test="hotkey_ != null and hotkey_ != ''">
		  #{hotkey_, jdbcType=VARCHAR},  <!-- 热键 -->
	    </if>
		<if test="parent_id_ != null and parent_id_ != ''">
		  #{parent_id_, jdbcType=VARCHAR},  <!-- 父节点流水号 -->
	    </if>
		<if test="is_leaf_ != null and is_leaf_ != ''">
		  #{is_leaf_, jdbcType=VARCHAR},  <!-- 是否叶子节点 -->
	    </if>
		<if test="is_auto_expand_ != null and is_auto_expand_ != ''">
		  #{is_auto_expand_, jdbcType=VARCHAR},  <!-- 是否自动展开 -->
	    </if>
		<if test="icon_name_ != null and icon_name_ != ''">
		  #{icon_name_, jdbcType=VARCHAR},  <!-- 图标文件名称 -->
	    </if>
		<if test="sort_no_ != null">
		  #{sort_no_, jdbcType=INTEGER},  <!-- 排序号 -->
	    </if>
		<if test="cascade_id_ != null and cascade_id_ != ''">
		  #{cascade_id_, jdbcType=VARCHAR},  <!-- 节点语义ID -->
	    </if>
		<if test="id_ != null and id_ != ''">
	      #{id_, jdbcType=VARCHAR}  <!-- ID -->
		</if>
		)
	</insert>

	<!-- 根据主键修改数据持久化对象 -->
	<update id="updateByKey" parameterType="Aos_ge_catalogPO">
		UPDATE aos_ge_catalog
		<set>
			<if test="id_ != null">
				id_ = #{id_},  <!-- ID -->
			</if>
			<if test="root_key_ != null">
				root_key_ = #{root_key_},  <!-- 科目标识键 -->
			</if>
			<if test="root_name_ != null">
				root_name_ = #{root_name_},  <!-- 科目名称 -->
			</if>
			<if test="name_ != null">
				name_ = #{name_},  <!-- 分类名称 -->
			</if>
			<if test="hotkey_ != null">
				hotkey_ = #{hotkey_},  <!-- 热键 -->
			</if>
			<if test="parent_id_ != null">
				parent_id_ = #{parent_id_},  <!-- 父节点流水号 -->
			</if>
			<if test="is_leaf_ != null">
				is_leaf_ = #{is_leaf_},  <!-- 是否叶子节点 -->
			</if>
			<if test="is_auto_expand_ != null">
				is_auto_expand_ = #{is_auto_expand_},  <!-- 是否自动展开 -->
			</if>
			<if test="icon_name_ != null">
				icon_name_ = #{icon_name_},  <!-- 图标文件名称 -->
			</if>
			<if test="sort_no_ != null">
				sort_no_ = #{sort_no_},  <!-- 排序号 -->
			</if>
			<if test="cascade_id_ != null">
				cascade_id_ = #{cascade_id_},  <!-- 节点语义ID -->
			</if>
		</set>
		WHERE  id_ = #{id_}
	</update>

	<!-- 根据主键查询并返回数据持久化对象 -->
	<select id="selectByKey" resultType="Aos_ge_catalogPO">
		SELECT
		<include refid="column" />
		FROM aos_ge_catalog WHERE  id_ = #{id_}
	</select>

	<!-- 根据唯一组合条件查询并返回数据持久化对象 -->
	<select id="selectOne" parameterType="Dto" resultType="Aos_ge_catalogPO">
		SELECT
		    <include refid="column" />
		FROM aos_ge_catalog
		<where>
		    <include refid="equal" />
		</where>		
	</select>

	<!-- 根据Dto查询并返回数据持久化对象集合 -->
	<select id="list" parameterType="Dto" resultType="Aos_ge_catalogPO">
		SELECT
			<include refid="column" />	
		FROM aos_ge_catalog
		<where>
		    <include refid="equal" />
		</where>	
	</select>

	<!-- 根据Dto查询并返回分页数据持久化对象集合 -->
	<select id="listPage" parameterType="Dto" resultType="Aos_ge_catalogPO" useCache="false">
	    SELECT
			<include refid="column" />	
		FROM aos_ge_catalog
		<where>
		    <include refid="equal" />
		</where>	
	</select>
	
	<!-- 根据Dto模糊查询并返回数据持久化对象集合(字符型字段模糊匹配，其余字段精确匹配) -->
	<select id="like" parameterType="Dto" resultType="Aos_ge_catalogPO">
		SELECT
			<include refid="column" />	
		FROM aos_ge_catalog
		<where>
		    <include refid="like" />
		</where>	
	</select>

	<!-- 根据Dto模糊查询并返回分页数据持久化对象集合(字符型字段模糊匹配，其余字段精确匹配) -->
	<select id="likePage" parameterType="Dto" resultType="Aos_ge_catalogPO" useCache="false">
	    SELECT
			<include refid="column" />	
		FROM aos_ge_catalog
		<where>
		    <include refid="like" />
		</where>	
	</select>

	<!-- 根据主键删除数据持久化对象 -->
	<delete id="deleteByKey">
		DELETE FROM aos_ge_catalog WHERE  id_ = #{id_}
	</delete>
	
	<!-- 根据Dto统计行数 -->
	<select id="rows" resultType="Integer" parameterType="Dto">
		SELECT COUNT(1) AS rows FROM aos_ge_catalog
		<where>
		    <include refid="equal" />
		</where>
	</select>
	
	<!-- 根据数学表达式进行数学运算 -->
	<select id="calc" parameterType="Dto" resultType="String">
		SELECT
			${_expr}
		FROM aos_ge_catalog
		<where>
		    <include refid="equal" />
		</where>
	</select>
	
</mapper>